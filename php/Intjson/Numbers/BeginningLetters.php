<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: intjson.proto

namespace Intjson\Numbers;

use UnexpectedValueException;

/**
 * Protobuf type <code>intjson.Numbers.BeginningLetters</code>
 */
class BeginningLetters
{
    /**
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>ALPHA = 1;</code>
     */
    const ALPHA = 1;
    /**
     * Generated from protobuf enum <code>BETA = 2;</code>
     */
    const BETA = 2;
    /**
     * Generated from protobuf enum <code>GAMMA = 3;</code>
     */
    const GAMMA = 3;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::ALPHA => 'ALPHA',
        self::BETA => 'BETA',
        self::GAMMA => 'GAMMA',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(BeginningLetters::class, \Intjson\Numbers_BeginningLetters::class);

